spring:
  application:
    name: account-service
  cloud:
    stream:
      kafka:
        binder:
          configuration:
            isolation.level: read_committed
        bindings:
          input:
            consumer:
              configuration:
                key:
                  deserializer: org.apache.kafka.common.serialization.StringDeserializer
                value:
                  deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
                schema:
                  registry:
                    url: ${spring.cloud.stream.schema-registry-client.endpoint}
          inputFraudulent:
            consumer:
              configuration:
                key:
                  deserializer: org.apache.kafka.common.serialization.StringDeserializer
                value:
                  deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
                schema:
                  registry:
                    url: ${spring.cloud.stream.schema-registry-client.endpoint}
      bindings:
        input:
          group: ${spring.application.name}
          destination: account
          consumer:
            useNativeDecoding: true
        inputFraudulent:
          group: ${spring.application.name}
          destination: fraudulent-transfer
          consumer:
            useNativeDecoding: true
      schema-registry-client:
        endpoint: http://localhost:8081

  datasource:
    url: jdbc:postgresql://localhost:5432/postgres
    username: postgres
    password: mysecretpassword
  jpa:
    database-platform: org.hibernate.dialect.PostgreSQL82Dialect
    hibernate:
      ddl-auto: update

sqllite:
  datasource:
    url: jdbc:sqlite:test.db
    driver-class-name: org.sqlite.JDBC
    username: sa
    password: sa
